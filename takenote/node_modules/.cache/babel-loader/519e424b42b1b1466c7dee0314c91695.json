{"ast":null,"code":"var _jsxFileName = \"/Users/timgentry/Desktop/Dev/takenote/takenote/src/components/NoteEditor.js\";\nimport React, { useState } from 'react';\nimport noteService from '../services/note';\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\n\nconst NoteEditor = ({\n  notes,\n  setNotes,\n  toggleEditorView\n}) => {\n  const [noteContent, setNoteContent] = useState(\"\");\n  const [newTitle, setNewTitle] = useState(\"\");\n  const [isImportant, setIsImportant] = useState(false);\n\n  const handleAddNote = e => {\n    e.preventDefault();\n    const newNote = {\n      title: newTitle,\n      content: noteContent,\n      important: isImportant\n    };\n    noteService.create(newNote).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n    }).catch(error => {\n      alert(`There was an error adding notes. Error Message: ${error}`);\n    }); //toggleEditorViews away from the editor on submit, back to NotesList. If () statement is necessary, or first note doesn't cause toggle\n\n    if (notes.length > 0) {\n      toggleEditorView();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Form, {\n    className: \"border px-3 pt-4 pb-2 my-4\",\n    onSubmit: handleAddNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"New Note\"), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, \"Title:\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    id: \"title\",\n    onChange: e => setNewTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"noteText\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, \"Body:\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"textarea\",\n    id: \"noteText\",\n    onChange: e => setNoteContent(e.target.value),\n    style: {\n      minHeight: \"38vh\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"Save\")), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"text-right pt-2 mr-3\",\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    onClick: () => setIsImportant(!isImportant),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    check: true,\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 29\n    }\n  }, \"Mark Important\"))))));\n};\n\nexport default NoteEditor;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/takenote/takenote/src/components/NoteEditor.js"],"names":["React","useState","noteService","Button","Form","FormGroup","Label","Input","Row","Col","NoteEditor","notes","setNotes","toggleEditorView","noteContent","setNoteContent","newTitle","setNewTitle","isImportant","setIsImportant","handleAddNote","e","preventDefault","newNote","title","content","important","create","then","returnedNote","concat","catch","error","alert","length","target","value","minHeight"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport noteService from '../services/note';\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\n\nconst NoteEditor = ({ notes, setNotes, toggleEditorView }) => {\n    const [noteContent, setNoteContent] = useState(\"\");\n    const [newTitle, setNewTitle] = useState(\"\");\n    const [isImportant, setIsImportant] = useState(false);\n\n    const handleAddNote = (e) => {\n        e.preventDefault();\n\n        const newNote = {\n            title: newTitle,\n            content: noteContent,\n            important: isImportant,\n        }\n\n        noteService\n            .create(newNote)\n            .then((returnedNote) => {\n                setNotes(notes.concat(returnedNote))\n            })\n            .catch((error) => {\n                alert(`There was an error adding notes. Error Message: ${error}`)\n            })\n\n        //toggleEditorViews away from the editor on submit, back to NotesList. If () statement is necessary, or first note doesn't cause toggle\n        if (notes.length > 0) {\n            toggleEditorView();\n        }\n    }\n\n    return (\n        <Form className=\"border px-3 pt-4 pb-2 my-4\" onSubmit={handleAddNote}>\n            <h2 className=\"text-center\">New Note</h2>\n            <FormGroup>\n                <Label for=\"title\">Title:</Label>\n                <Input type=\"text\" id=\"title\" onChange={(e) => setNewTitle(e.target.value)} />\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"noteText\">Body:</Label>\n                <Input type=\"textarea\" id=\"noteText\" onChange={(e) => setNoteContent(e.target.value)} style={{ minHeight: \"38vh\" }} />\n            </FormGroup>\n            <Row>\n                <Col>\n                    <Button type=\"submit\" color=\"primary\">Save</Button>\n                </Col>\n                <Col>\n                    <FormGroup className=\"text-right pt-2 mr-3\" check>\n                        <Input type=\"checkbox\" onClick={() => setIsImportant(!isImportant)} />\n                        <Label check className=\"mb-2\" >\n                            <strong>Mark Important</strong>\n                        </Label>\n                    </FormGroup>\n                </Col>\n            </Row>\n        </Form>\n    );\n};\n\nexport default NoteEditor;"]},"metadata":{},"sourceType":"module"}