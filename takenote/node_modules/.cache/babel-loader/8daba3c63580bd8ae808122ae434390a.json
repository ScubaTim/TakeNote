{"ast":null,"code":"import _slicedToArray from\"/Users/timgentry/Desktop/Dev/takenote/takenote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useCallback}from'react';import{Button,Form,FormGroup,Label,Input,Row,Col}from'reactstrap';import noteService from'../services/note';var NoteEditor=function NoteEditor(_ref){var notes=_ref.notes,setNotes=_ref.setNotes,toggleEditorView=_ref.toggleEditorView;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),noteContent=_useState2[0],setNoteContent=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),newTitle=_useState4[0],setNewTitle=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isImportant=_useState6[0],setIsImportant=_useState6[1];var handleAddNote=useCallback(function(e){e.preventDefault();var newNote={title:newTitle,content:noteContent,important:isImportant};noteService.create(newNote).then(function(returnedNote){setNotes(notes.concat(returnedNote));}).catch(function(error){alert(\"There was an error adding notes. Error Message: \".concat(error));});//Spookiness logs go here \\/  :(\n//toggleEditorViews away from the editor on submit, back to NotesList. If () statement is necessary, or first note doesn't cause toggle\nif(notes.length>0){toggleEditorView();}},[newTitle,noteContent,isImportant,toggleEditorView,notes,setNotes]);var handleNewTitle=useCallback(function(e){setNewTitle(e.target.value);},[]);var handleNoteContent=useCallback(function(e){setNoteContent(e.target.value);},[]);var handleIsImportant=useCallback(function(){setIsImportant(!isImportant);},[isImportant]);return/*#__PURE__*/React.createElement(Form,{className:\"border px-3 pt-4 pb-2 my-4\",onSubmit:handleAddNote},/*#__PURE__*/React.createElement(\"h2\",{className:\"text-center\"},\"New Note\"),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{for:\"title\"},\"Title:\"),/*#__PURE__*/React.createElement(Input,{type:\"text\",id:\"title\",onChange:handleNewTitle})),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{for:\"noteText\"},\"Body:\"),/*#__PURE__*/React.createElement(Input,{type:\"textarea\",id:\"noteText\",onChange:handleNoteContent,style:{minHeight:\"38vh\"}})),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{xs:\"auto\"},/*#__PURE__*/React.createElement(Button,{type:\"submit\",color:\"primary\"},\"Save\")),/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(FormGroup,{className:\"text-right pt-2\",check:true},/*#__PURE__*/React.createElement(Input,{type:\"checkbox\",onClick:handleIsImportant}),/*#__PURE__*/React.createElement(Label,{check:true,className:\"mb-2 font-weight-bold\"},\"Mark Important\")))));};export default NoteEditor;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/takenote/takenote/src/components/NoteEditor.js"],"names":["React","useState","useCallback","Button","Form","FormGroup","Label","Input","Row","Col","noteService","NoteEditor","notes","setNotes","toggleEditorView","noteContent","setNoteContent","newTitle","setNewTitle","isImportant","setIsImportant","handleAddNote","e","preventDefault","newNote","title","content","important","create","then","returnedNote","concat","catch","error","alert","length","handleNewTitle","target","value","handleNoteContent","handleIsImportant","minHeight"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { Button, Form, FormGroup, Label, Input, Row, Col } from 'reactstrap';\n\nimport noteService from '../services/note';\n\n\nconst NoteEditor = ({ notes, setNotes, toggleEditorView }) => {\n    const [noteContent, setNoteContent] = useState(\"\");\n    const [newTitle, setNewTitle] = useState(\"\");\n    const [isImportant, setIsImportant] = useState(false);\n\n    const handleAddNote = useCallback(\n        (e) => {\n            e.preventDefault();\n\n            const newNote = {\n                title: newTitle,\n                content: noteContent,\n                important: isImportant,\n            }\n\n            noteService\n                .create(newNote)\n                .then((returnedNote) => {\n                    setNotes(notes.concat(returnedNote))\n                })\n                .catch((error) => {\n                    alert(`There was an error adding notes. Error Message: ${error}`)\n                })\n            //Spookiness logs go here \\/  :(\n\n            //toggleEditorViews away from the editor on submit, back to NotesList. If () statement is necessary, or first note doesn't cause toggle\n            if (notes.length > 0) {\n                toggleEditorView();\n            }\n        }, [newTitle, noteContent, isImportant, toggleEditorView, notes, setNotes])\n\n    const handleNewTitle = useCallback(\n        (e) => {\n            setNewTitle(e.target.value)\n        }, [])\n\n    const handleNoteContent = useCallback(\n        (e) => {\n            setNoteContent(e.target.value)\n        }, [])\n\n    const handleIsImportant = useCallback(\n        () => {\n            setIsImportant(!isImportant)\n        }, [isImportant])\n\n    return (\n        <Form className=\"border px-3 pt-4 pb-2 my-4\" onSubmit={handleAddNote}>\n            <h2 className=\"text-center\">New Note</h2>\n            <FormGroup>\n                <Label for=\"title\">Title:</Label>\n                <Input type=\"text\" id=\"title\" onChange={handleNewTitle} />\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"noteText\">Body:</Label>\n                <Input type=\"textarea\" id=\"noteText\" onChange={handleNoteContent} style={{ minHeight: \"38vh\" }} />\n            </FormGroup>\n            <Row>\n                <Col xs=\"auto\">\n                    <Button type=\"submit\" color=\"primary\">Save</Button>\n                </Col>\n                <Col>\n                    <FormGroup className=\"text-right pt-2\" check>\n                        <Input type=\"checkbox\" onClick={handleIsImportant} />\n                        <Label check className=\"mb-2 font-weight-bold\" >\n                            Mark Important\n                        </Label>\n                    </FormGroup>\n                </Col>\n            </Row>\n        </Form>\n    );\n};\n\nexport default NoteEditor;"]},"metadata":{},"sourceType":"module"}