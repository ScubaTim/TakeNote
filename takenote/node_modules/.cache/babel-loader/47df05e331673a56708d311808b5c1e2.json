{"ast":null,"code":"var _jsxFileName = \"/Users/timgentry/Desktop/Dev/takenote/takenote/src/components/NotesList.js\";\nimport React, { useState } from 'react';\nimport Note from './Note';\nimport styled from 'styled-components';\nimport { Row, Col, Input, Label } from 'reactstrap'; //The \"Grid\"\n\nconst ListField = styled('div')`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: space-between;\n`;\n\nconst NotesList = ({\n  notesList,\n  setNotes\n}) => {\n  const [showImportant, setShowImportant] = useState(false);\n\n  const toggleImportantOnly = () => {\n    setShowImportant(!showImportant);\n  };\n\n  const important = /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    check: true,\n    className: \"ml-4 pl-1 my-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    onClick: () => toggleImportantOnly(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  }), showImportant ? /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 34\n    }\n  }, \"Show Important Only\") : /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 69\n    }\n  }, \"Show All\")));\n  const Notes = notesList.map((note, i) => /*#__PURE__*/React.createElement(Col, {\n    key: i,\n    xs: \"12\",\n    sm: \"6\",\n    md: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Note, {\n    note: note,\n    notesList: notesList,\n    setNotes: setNotes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  })));\n  console.log('Notes', Notes);\n\n  if (showImportant) {\n    //Generates a list of only the important notes\n    const Notes = notesList.filter(note => note.important).map((note, i) => /*#__PURE__*/React.createElement(Col, {\n      key: i,\n      xs: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Note, {\n      note: note,\n      notesList: notesList,\n      setNotes: setNotes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }\n    })));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListField, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }\n    }, Notes)))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, important));\n  }\n\n  if (!showImportant) {\n    //Generates a list of all notes with correct columns\n    const Notes = notesList.map((note, i) => /*#__PURE__*/React.createElement(Col, {\n      key: i,\n      xs: \"12\",\n      sm: \"6\",\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Note, {\n      note: note,\n      notesList: notesList,\n      setNotes: setNotes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    })));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      className: \"mb-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListField, {\n      className: \"py-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 29\n      }\n    }, Notes)))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, important));\n  }\n};\n\nexport default NotesList;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/takenote/takenote/src/components/NotesList.js"],"names":["React","useState","Note","styled","Row","Col","Input","Label","ListField","NotesList","notesList","setNotes","showImportant","setShowImportant","toggleImportantOnly","important","Notes","map","note","i","console","log","filter"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Note from './Note';\nimport styled from 'styled-components';\nimport { Row, Col, Input, Label } from 'reactstrap';\n\n//The \"Grid\"\nconst ListField = styled('div')`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    align-items: space-between;\n`\n\nconst NotesList = ({ notesList, setNotes }) => {\n    const [showImportant, setShowImportant] = useState(false);\n\n    const toggleImportantOnly = () => {\n        setShowImportant(!showImportant);\n    }\n\n    const important = (\n        <Col>\n            <hr />\n            <Label check className=\"ml-4 pl-1 my-3\">\n                <Input type=\"checkbox\" onClick={() => toggleImportantOnly()} />\n                {showImportant ? <span>Show Important Only</span> : <span>Show All</span>}\n            </Label>\n        </Col>\n    )\n\n    const Notes = notesList.map((note, i) => (\n        <Col key={i} xs=\"12\" sm=\"6\" md=\"4\" >\n            <Note note={note} notesList={notesList} setNotes={setNotes} />\n        </Col>\n    ));\n    console.log('Notes', Notes)\n\n    if (showImportant) {\n        //Generates a list of only the important notes\n        const Notes = (\n            notesList\n                .filter((note) => note.important)\n                .map((note, i) => (\n                    <Col key={i} xs=\"4\">\n                        <Note note={note} notesList={notesList} setNotes={setNotes} />\n                    </Col>\n                ))\n        );\n\n        return (\n            <>\n                <Row className=\"mb-5\">\n                    <Col>\n                        <ListField>\n                            <Row>\n                                {Notes}\n                            </Row>\n                        </ListField>\n                    </Col>\n                </Row>\n                <Row>\n                    {important}\n                </Row>\n            </>\n        )\n    }\n\n    if (!showImportant) {\n        //Generates a list of all notes with correct columns\n        const Notes = notesList.map((note, i) => (\n            <Col key={i} xs=\"12\" sm=\"6\" md=\"4\">\n                <Note note={note} notesList={notesList} setNotes={setNotes} />\n            </Col>\n        ));\n\n        return (\n            <>\n                <Row className=\"mb-5\">\n                    <Col>\n                        <ListField className=\"py-3\">\n                            <Row>\n                                {Notes}\n                            </Row>\n                        </ListField>\n                    </Col>\n                </Row>\n                <Row>\n                    {important}\n                </Row>\n            </>\n        );\n    }\n\n\n};\n\nexport default NotesList;"]},"metadata":{},"sourceType":"module"}