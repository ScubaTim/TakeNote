{"ast":null,"code":"var _jsxFileName = \"/Users/timgentry/Desktop/Dev/takenote/takenote/src/components/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport noteService from '../services/note';\nimport Toolbar from './Toolbar';\nimport NotesList from './NotesList';\nimport NoteEditor from './NoteEditor';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [toggleEditorView, setToggleEditorView] = useState(false);\n  useEffect(() => {\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const handleToggle = () => {\n    setToggleEditorView(!toggleEditorView);\n  }; //If no notes to display, show note editor instead.\n\n\n  if (notes.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Toolbar, {\n      toggle: handleToggle(),\n      toggleView: toggleEditorView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(NoteEditor, {\n      notes: notes,\n      setNotes: setNotes,\n      toggle: handleToggle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 29\n      }\n    })))));\n  } //If there are notes, show NoteList unless toggleEditorView is pressed, then show NoteEditor.\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    toggle: handleToggle(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, toggleEditorView ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 28\n    }\n  }, /*#__PURE__*/React.createElement(NoteEditor, {\n    notes: notes,\n    setNotes: setNotes,\n    toggle: handleToggle(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 33\n    }\n  }), \" \")) : /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 28\n    }\n  }, /*#__PURE__*/React.createElement(NotesList, {\n    notesList: notes,\n    setNotes: setNotes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 33\n    }\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/takenote/takenote/src/components/App.js"],"names":["React","useState","useEffect","noteService","Toolbar","NotesList","NoteEditor","Container","Row","Col","App","notes","setNotes","toggleEditorView","setToggleEditorView","getAll","then","initialNotes","handleToggle","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,YAApC;;AAEA,MAAMC,GAAG,GAAG,MAAM;AACd,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,KAAD,CAAxD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,WAAW,CACNY,MADL,GAEKC,IAFL,CAEUC,YAAY,IAAI;AAClBL,MAAAA,QAAQ,CAACK,YAAD,CAAR;AACH,KAJL;AAKH,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMC,YAAY,GAAG,MAAM;AACvBJ,IAAAA,mBAAmB,CAAC,CAACD,gBAAF,CAAnB;AACH,GAFD,CAZc,CAgBd;;;AACA,MAAIF,KAAK,CAACQ,MAAN,KAAiB,CAArB,EAAwB;AACpB,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,OAAD;AAAS,MAAA,MAAM,EAAED,YAAY,EAA7B;AAAiC,MAAA,UAAU,EAAEL,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAY,MAAA,KAAK,EAAEF,KAAnB;AAA0B,MAAA,QAAQ,EAAEC,QAApC;AAA8C,MAAA,MAAM,EAAEM,YAAY,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ,CAFJ,CADJ;AAYH,GA9Ba,CAgCd;;;AACA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAS,IAAA,MAAM,EAAEA,YAAY,EAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKL,gBAAgB,gBACX,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAK,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAK,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEF,KAAnB;AAA0B,IAAA,QAAQ,EAAEC,QAApC;AAA8C,IAAA,MAAM,EAAEM,YAAY,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,MAAL,CADW,gBAEX,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAK,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAK,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEP,KAAtB;AAA6B,IAAA,QAAQ,EAAEC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAL,CAAL,CAHV,CAFJ,CADJ;AAWH,CA5CD;;AA8CA,eAAeF,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport noteService from '../services/note';\nimport Toolbar from './Toolbar';\nimport NotesList from './NotesList';\nimport NoteEditor from './NoteEditor';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [toggleEditorView, setToggleEditorView] = useState(false);\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, []);\n\n    const handleToggle = () => {\n        setToggleEditorView(!toggleEditorView);\n    }\n\n    //If no notes to display, show note editor instead.\n    if (notes.length === 0) {\n        return (\n            <div>\n                <Toolbar toggle={handleToggle()} toggleView={toggleEditorView} />\n                <Container>\n                    <Row>\n                        <Col>\n                            <NoteEditor notes={notes} setNotes={setNotes} toggle={handleToggle()} />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n\n    //If there are notes, show NoteList unless toggleEditorView is pressed, then show NoteEditor.\n    return (\n        <div>\n            <Toolbar toggle={handleToggle()} />\n            <Container>\n                {toggleEditorView\n                    ? <Row><Col><NoteEditor notes={notes} setNotes={setNotes} toggle={handleToggle()} /> </Col></Row>\n                    : <Row><Col><NotesList notesList={notes} setNotes={setNotes} /></Col></Row>}\n\n            </Container>\n        </div>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}