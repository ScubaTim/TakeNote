{"ast":null,"code":"import _slicedToArray from\"/Users/timgentry/Desktop/Dev/takenote/takenote/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import noteService from'../services/note';import Toolbar from'./Toolbar';import NotesList from'./NotesList';import NoteEditor from'./NoteEditor';import{Container,Row,Col}from'reactstrap';var App=function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),notes=_useState2[0],setNotes=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),toggleEditorView=_useState4[0],setToggleEditorView=_useState4[1];useEffect(function(){noteService.getAll().then(function(initialNotes){setNotes(initialNotes);});},[]);var handleToggle=function handleToggle(){setToggleEditorView(!toggleEditorView);};//If no notes to display, show note editor instead.\nif(notes.length===0){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Toolbar,{toggle:handleToggle,toggleView:toggleEditorView}),/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(NoteEditor,{notes:notes,setNotes:setNotes,toggle:handleToggle})))));}//If there are notes, show NoteList unless toggleEditorView is pressed, then show NoteEditor.\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Toolbar,{toggle:handleToggle,toggleView:toggleEditorView}),/*#__PURE__*/React.createElement(Container,null,toggleEditorView?/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(NoteEditor,{notes:notes,setNotes:setNotes,toggle:handleToggle}),\" \")):/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(NotesList,{notesList:notes,setNotes:setNotes})))));};export default App;","map":{"version":3,"sources":["/Users/timgentry/Desktop/Dev/takenote/takenote/src/components/App.js"],"names":["React","useState","useEffect","noteService","Toolbar","NotesList","NoteEditor","Container","Row","Col","App","notes","setNotes","toggleEditorView","setToggleEditorView","getAll","then","initialNotes","handleToggle","length"],"mappings":"qKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,WAAP,KAAwB,kBAAxB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,aAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,OAASC,SAAT,CAAoBC,GAApB,CAAyBC,GAAzB,KAAoC,YAApC,CAEA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,eACYT,QAAQ,CAAC,EAAD,CADpB,wCACPU,KADO,eACAC,QADA,8BAEkCX,QAAQ,CAAC,KAAD,CAF1C,yCAEPY,gBAFO,eAEWC,mBAFX,eAIdZ,SAAS,CAAC,UAAM,CACZC,WAAW,CACNY,MADL,GAEKC,IAFL,CAEU,SAAAC,YAAY,CAAI,CAClBL,QAAQ,CAACK,YAAD,CAAR,CACH,CAJL,EAKH,CANQ,CAMN,EANM,CAAT,CAQA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CACvBJ,mBAAmB,CAAC,CAACD,gBAAF,CAAnB,CACH,CAFD,CAIA;AACA,GAAIF,KAAK,CAACQ,MAAN,GAAiB,CAArB,CAAwB,CACpB,mBACI,4CACI,oBAAC,OAAD,EAAS,MAAM,CAAED,YAAjB,CAA+B,UAAU,CAAEL,gBAA3C,EADJ,cAEI,oBAAC,SAAD,mBACI,oBAAC,GAAD,mBACI,oBAAC,GAAD,mBACI,oBAAC,UAAD,EAAY,KAAK,CAAEF,KAAnB,CAA0B,QAAQ,CAAEC,QAApC,CAA8C,MAAM,CAAEM,YAAtD,EADJ,CADJ,CADJ,CAFJ,CADJ,CAYH,CAED;AACA,mBACI,4CACI,oBAAC,OAAD,EAAS,MAAM,CAAEA,YAAjB,CAA+B,UAAU,CAAEL,gBAA3C,EADJ,cAEI,oBAAC,SAAD,MACKA,gBAAgB,cACX,oBAAC,GAAD,mBAAK,oBAAC,GAAD,mBAAK,oBAAC,UAAD,EAAY,KAAK,CAAEF,KAAnB,CAA0B,QAAQ,CAAEC,QAApC,CAA8C,MAAM,CAAEM,YAAtD,EAAL,KAAL,CADW,cAEX,oBAAC,GAAD,mBAAK,oBAAC,GAAD,mBAAK,oBAAC,SAAD,EAAW,SAAS,CAAEP,KAAtB,CAA6B,QAAQ,CAAEC,QAAvC,EAAL,CAAL,CAHV,CAFJ,CADJ,CAWH,CA5CD,CA8CA,cAAeF,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport noteService from '../services/note';\nimport Toolbar from './Toolbar';\nimport NotesList from './NotesList';\nimport NoteEditor from './NoteEditor';\nimport { Container, Row, Col } from 'reactstrap';\n\nconst App = () => {\n    const [notes, setNotes] = useState([]);\n    const [toggleEditorView, setToggleEditorView] = useState(false);\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, []);\n\n    const handleToggle = () => {\n        setToggleEditorView(!toggleEditorView);\n    }\n\n    //If no notes to display, show note editor instead.\n    if (notes.length === 0) {\n        return (\n            <div>\n                <Toolbar toggle={handleToggle} toggleView={toggleEditorView} />\n                <Container>\n                    <Row>\n                        <Col>\n                            <NoteEditor notes={notes} setNotes={setNotes} toggle={handleToggle} />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n\n    //If there are notes, show NoteList unless toggleEditorView is pressed, then show NoteEditor.\n    return (\n        <div>\n            <Toolbar toggle={handleToggle} toggleView={toggleEditorView} />\n            <Container>\n                {toggleEditorView\n                    ? <Row><Col><NoteEditor notes={notes} setNotes={setNotes} toggle={handleToggle} /> </Col></Row>\n                    : <Row><Col><NotesList notesList={notes} setNotes={setNotes} /></Col></Row>}\n\n            </Container>\n        </div>\n    );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}